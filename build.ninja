# Ninja file generated by bang (https://cdelord.fr/bang)
# bang build.lua -o build.ninja

# ypp
#
# Targets:
#   help      show this help message
#   compile   Compile ypp
#   doc       Generate README.md
#   test      Run ypp tests
#   all       Compile ypp, run test and generate doc
#   install   install ypp in PREFIX or ~/.local
#   clean     clean generated files

# Files installed in bin
#   .build/ypp
#   .build/ypp.lua
#   .build/ypp-pandoc.lua

ninja_required_version = 1.11.1

######################################################################
# This file is part of ypp.
#
# ypp is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ypp is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ypp.  If not, see <https://www.gnu.org/licenses/>.
#
# For further information about ypp you can visit
# http://cdelord.fr/ypp
######################################################################

builddir = .build

######################################################################
# Compilation
######################################################################

rule _builddir__YPP_VERSION
  description = VERSION $out
  command = git describe --tags > $out

build $builddir/_YPP_VERSION: _builddir__YPP_VERSION | .git/refs/tags .git/index

rule luax-native
  description = luax-native $out
  command = luax compile -t native $in -o $out -q

build $builddir/ypp: luax-native src/atexit.lua src/comment.lua src/convert.lua src/doc.lua src/file.lua src/flex.lua src/image.lua src/include.lua src/parser.lua src/q.lua src/script.lua src/when.lua src/ypp.lua $builddir/_YPP_VERSION

rule luax-lua
  description = luax-lua $out
  command = luax compile -t lua $in -o $out -q

build $builddir/ypp.lua: luax-lua src/atexit.lua src/comment.lua src/convert.lua src/doc.lua src/file.lua src/flex.lua src/image.lua src/include.lua src/parser.lua src/q.lua src/script.lua src/when.lua src/ypp.lua $builddir/_YPP_VERSION

rule luax-pandoc
  description = luax-pandoc $out
  command = luax compile -t pandoc $in -o $out -q

build $builddir/ypp-pandoc.lua: luax-pandoc src/atexit.lua src/comment.lua src/convert.lua src/doc.lua src/file.lua src/flex.lua src/image.lua src/include.lua src/parser.lua src/q.lua src/script.lua src/when.lua src/ypp.lua $builddir/_YPP_VERSION

rule luax
  description = luax $out
  command = luax compile -t luax $in -o $out -q

build $builddir/ypp.luax: luax src/atexit.lua src/comment.lua src/convert.lua src/doc.lua src/file.lua src/flex.lua src/image.lua src/include.lua src/parser.lua src/q.lua src/script.lua src/when.lua src/ypp.lua $builddir/_YPP_VERSION

######################################################################
# Documentation
######################################################################

rule _builddir_doc_README.md
  description = YPP $in
  command = export BUILD=$builddir; export YPP_IMG=doc/img; $builddir/ypp -t svg --MF $depfile $in -o $out
  depfile = $out.d

build $builddir/doc/README.md: _builddir_doc_README.md doc/ypp.md | $builddir/ypp

rule README.md
  description = PANDOC $out
  command = pandoc --to gfm $in -o $out

build README.md: README.md $builddir/doc/README.md

######################################################################
# Tests
######################################################################

rule diff
  description = DIFF $in
  command = diff $in > $out || (cat $out && false)

build $builddir/test/test.md.diff: diff $builddir/test/test.md test/test-ref.md
build $builddir/test/test.md.d.diff: diff $builddir/test/test.md.d test/test-ref.d
build $builddir/test/test-file.txt.diff: diff $builddir/test/test-file.txt test/test-file.txt
build $builddir/test/ypp_images/hello.svg.meta.diff: diff $builddir/test/ypp_images/hello.svg.meta test/hello.svg.meta

rule _builddir_test_test.md
  description = YPP $in
  command = export BUILD=$builddir; export YPP_IMG=[$builddir/test/]ypp_images; $builddir/ypp-pandoc.lua -t svg --MF $out.d -p test -l test.lua $in -o $out
  depfile = $out.d

build $builddir/test/test.md | $builddir/test/test.md.d $builddir/test/test-file.txt $builddir/test/ypp_images/hello.svg.meta: _builddir_test_test.md test/test.md | $builddir/ypp-pandoc.lua |@ $builddir/test/test.md.diff $builddir/test/test.md.d.diff $builddir/test/test-file.txt.diff $builddir/test/ypp_images/hello.svg.meta.diff
build $builddir/test/test-error.err.diff: diff $builddir/test/test-error.err test/test-error-ref.err

rule _builddir_test_test-error.err
  description = YPP $in
  command = $builddir/ypp.lua -p test -l test.lua $in 2> $out ; test $$? -ne 0

build $builddir/test/test-error.err: _builddir_test_test-error.err test/test-error.md | $builddir/ypp.lua |@ $builddir/test/test-error.err.diff
build $builddir/test/test-error-color.err.diff: diff $builddir/test/test-error-color.err test/test-error-color-ref.err

rule _builddir_test_test-error-color.err
  description = YPP $in
  command = $builddir/ypp.lua -a -p test -l test.lua $in 2> $out ; test $$? -ne 0

build $builddir/test/test-error-color.err: _builddir_test_test-error-color.err test/test-error.md | $builddir/ypp.lua |@ $builddir/test/test-error-color.err.diff
build $builddir/test/test-syntax-error.err.diff: diff $builddir/test/test-syntax-error.err test/test-syntax-error-ref.err

rule _builddir_test_test-syntax-error.err
  description = YPP $in
  command = $builddir/ypp.lua $in 2> $out ; test $$? -ne 0

build $builddir/test/test-syntax-error.err: _builddir_test_test-syntax-error.err test/test-syntax-error.md | $builddir/ypp.lua |@ $builddir/test/test-syntax-error.err.diff
build $builddir/test/test-syntax-error-color.err.diff: diff $builddir/test/test-syntax-error-color.err test/test-syntax-error-color-ref.err

rule _builddir_test_test-syntax-error-color.err
  description = YPP $in
  command = $builddir/ypp.lua -a $in 2> $out ; test $$? -ne 0

build $builddir/test/test-syntax-error-color.err: _builddir_test_test-syntax-error-color.err test/test-syntax-error.md | $builddir/ypp.lua |@ $builddir/test/test-syntax-error-color.err.diff

######################################################################
# Shortcuts
######################################################################

build compile: phony $builddir/ypp $builddir/ypp.lua $builddir/ypp-pandoc.lua $builddir/ypp.luax

default compile

build doc: phony README.md
build test: phony $builddir/test/test.md $builddir/test/test-error.err $builddir/test/test-error-color.err $builddir/test/test-syntax-error.err $builddir/test/test-syntax-error-color.err
build all: phony compile test doc

######################################################################
# Installation
######################################################################

prefix = ~/.local

rule install-bin
  description = INSTALL $in to bin
  command = install -v -D -t $${PREFIX:-$prefix}/bin $in

build install-bin: install-bin $builddir/ypp $builddir/ypp.lua $builddir/ypp-pandoc.lua
build install: phony install-bin

######################################################################
# Clean
######################################################################

rule clean-_builddir
  description = CLEAN $builddir
  command = rm -rf $builddir/*

build clean-_builddir: clean-_builddir
build clean: phony clean-_builddir

######################################################################
# Help
######################################################################

rule help
  description = help
  command = echo "ypp"; $
            echo ""; $
            echo "Targets:"; $
            echo "  help      show this help message"; $
            echo "  compile   Compile ypp"; $
            echo "  doc       Generate README.md"; $
            echo "  test      Run ypp tests"; $
            echo "  all       Compile ypp, run test and generate doc"; $
            echo "  install   install ypp in PREFIX or ~/.local"; $
            echo "  clean     clean generated files"

build help: help

######################################################################
# Regenerate build.ninja when build.lua changes
######################################################################

rule bang
  command = bang $in -o $out
  generator = true

build build.ninja: bang build.lua
